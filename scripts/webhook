#!/usr/bin/env -S python3 -u
# -S allows for arguments
# -u unbuffered output

print("imports")
import os
import cgi
import re
import subprocess
from addresses import addresses, email
import poChecker
from db import DB

SRT_PATH = "/home/nvdal10n/mr/srt"
SCRIPTS_PATH = "/home/nvdal10n/mr/scripts"

# Ensure our overridden svn gets used, including subprocesses.
# Also add /usr/local/bin, which isn't already included in this context.
os.environ["PATH"] = "/home/nvdal10n/bin:/usr/local/bin:" + os.environ["PATH"]

print("load cgi field storage")
form = cgi.FieldStorage() # instantiate only once!

author = form['author'].value if 'author' in form else 'pratchett'
action = form['action'].value if 'action' in form else 'wrote'
body = form['body'].value if 'body' in form else 'the colour of magic'
title = form['title'].value if 'title' in form else 'disc world'
subject = "SRT %s" % title
body = "%s %s %s\n\n%s" %(author, action, title, body)


rcpts = []
for langCode in addresses.keys():
    if re.search(r'/test/', body):
        print("Test detected")
        break
    # language id in path or filename: "/en-us/" or ".en-us.po"
    if re.search(rf'(\s+/{langCode}/)|(\.{langCode}\.po)', body):
        rcpts.extend(addresses[langCode]['email'])

hasAlert = False
subprocess.call(["svn", "update", "-q"], cwd=SRT_PATH)

# Check any po files in this commit.
poFiles = re.findall(r'(?<=[AM]\s)/.*\.po', body)
for po in poFiles:
    print(f"Found poFile match:{po}")
    poPath = os.path.join(SRT_PATH, po[1:])
    try:
        c = poChecker.PoChecker(poPath)
        if not c.check():
            if c.errorCount > 0:
                hasAlert = True
            report = c.getReport()
            body += "\n\n\n" + report
    except:
        import traceback
        body += "\n\n\nError checking %s:\n%s" % (po, traceback.format_exc())
        hasAlert = True

# Check any settings files in this commit.
files = re.findall(r'(?<=[AM]\s)/[^/]+/settings', body)
for f in files:
    f = f[1:]
    path = os.path.join(SRT_PATH, f)
    try:
        print(f"testing settings file: {path}")
        DB(path)
    except Exception as e:
        hasAlert = True
        body += "\n\n\nError in %s: %s" % (f, e)

# Convert any t2t files in this commit.
# The t2t conversion code operates per language.
t2tLangs = re.findall(r'(?<=[AM]\s)/([^/]+)/[^/]+\.t2t', body)
for lang in t2tLangs:
    print(f"run convertOne for {lang}")
    try:
        subprocess.check_output([os.path.join(SCRIPTS_PATH, "convertOne.sh")],
            cwd=os.path.join(SRT_PATH, lang),
            stderr=subprocess.STDOUT,
            errors="UTF-8",
        )
        # https://docs.python.org/3.7/library/subprocess.html#subprocess.Popen.stderr
        #  If the encoding or errors arguments were specified or the universal_newlines argument was True,
        #  the stream is a text stream, otherwise it is a byte stream. If the stderr argument was not PIPE,
        #  this attribute is None.
    except subprocess.CalledProcessError as e:
        convertOneError: str = e.output
        hasAlert = True
        body += "\n\n\n" + convertOneError

# Don't flag alerts for automated commits.
# Automated commits shouldn't introduce errors, so any errors were there before.
if hasAlert and author != "CommitBot":
    subject = "[alert] " + subject
email(rcpts, subject, body, includeAdmin=hasAlert)
print("Notification sent.")

rawData= "\n".join(
    [f"{key}='{form[key].value}'" for key in form.keys()]
)
print(f"""--- start ---
rcpts: {", ".join(rcpts)}
subject: {subject}
body: {body}
--- raw data ---
{rawData}:
--- end ---
""")

if re.search("/website/", body):
    print("running website post-commit hook.")
    pc = '/home/nvdal10n/ikiwiki/publish/post-commit'
    try:
        subprocess.check_output(
            [pc],
            stderr=subprocess.STDOUT,
            errors="UTF-8",
        )
    except subprocess.CalledProcessError as e:
        print(f"error occurred during {pc}: {e}")
    print("finished website post-commit hook.")
