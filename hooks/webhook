#!/usr/bin/env python3

import sys
import logging
import subprocess
import os
from datetime import datetime

print("Content-type: text/plain\n")
print("starting")

logging.basicConfig(
	# This process is run as user nvdal10n, which does not have write permissions for
	# /var/log/uwsgi/app/ so instead of writing to file, write to stderr.
	# stderr is logged to /var/log/uwsgi/app/nvdal10n.log by nginx/fastcgi
	level=logging.DEBUG,
	stream=sys.stderr,
)

startDate = datetime.now().strftime("%Y-%b-%d %H:%M:%S")
logging.info(f"Webhook starting: {startDate}")

SCRIPTS_PATH = os.path.abspath('../mr/scripts')

def executeScriptsWebhook():
	cmd = (os.path.join(SCRIPTS_PATH, "webhook"))
	proc = subprocess.Popen(
		cmd,
		cwd=SCRIPTS_PATH,
		stdout=subprocess.PIPE,
		stderr=subprocess.STDOUT,
		errors="UTF-8",
		encoding="UTF-8",
	)

	# https://docs.python.org/3.7/library/subprocess.html#subprocess.Popen.stderr
	#  If the encoding or errors arguments were specified or the universal_newlines argument was True,
	#  the stream is a text stream, otherwise it is a byte stream. If the stderr argument was not PIPE,
	#  this attribute is None.
	for stdout_line in proc.stdout:
		yield stdout_line
	proc.stdout.close()
	return_code = proc.wait()
	if return_code:
		raise subprocess.CalledProcessError(return_code, cmd)

try:
	logging.debug(f"starting scripts\\webHook")
	for line in executeScriptsWebhook():
		logging.debug(line)
except Exception as e:
	logging.error(f"Error running scripts\\webhook process: {e}")
logging.debug(f"finished scripts\\webhook")
endDate = datetime.now().strftime("%Y-%b-%d %H:%M:%S")
logging.info(f"Webhook finished: {endDate}")
print("ok")
